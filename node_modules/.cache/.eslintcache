<<<<<<< HEAD
[{"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\index.js":"1","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\serviceWorker.js":"2","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\App.js":"3","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\landing.jsx":"4","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\inventory.js":"5","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\recipes.js":"6","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\recycling.js":"7","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\information.js":"8","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\knowledge.js":"9","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\contact.jsx":"10","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\navigation.jsx":"11","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\features.jsx":"12","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\header.jsx":"13","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\about.jsx":"14","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\testimonials.jsx":"15","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\gallery.jsx":"16","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\services.jsx":"17","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\Team.jsx":"18","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\components\\InventoryList.js":"19","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\au-map.jsx":"20","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\image.jsx":"21"},{"size":520,"mtime":1713781143259,"results":"22","hashOfConfig":"23"},{"size":5227,"mtime":1713781143259,"results":"24","hashOfConfig":"23"},{"size":2128,"mtime":1713781142663,"results":"25","hashOfConfig":"23"},{"size":1065,"mtime":1713781143259,"results":"26","hashOfConfig":"23"},{"size":21178,"mtime":1713781143138,"results":"27","hashOfConfig":"23"},{"size":12994,"mtime":1713781142678,"results":"28","hashOfConfig":"23"},{"size":1162,"mtime":1713781142678,"results":"29","hashOfConfig":"23"},{"size":10692,"mtime":1713963561923,"results":"30","hashOfConfig":"23"},{"size":1159,"mtime":1713781142678,"results":"31","hashOfConfig":"23"},{"size":1057,"mtime":1713781143246,"results":"32","hashOfConfig":"23"},{"size":1801,"mtime":1713781277515,"results":"33","hashOfConfig":"23"},{"size":716,"mtime":1713781143250,"results":"34","hashOfConfig":"23"},{"size":1112,"mtime":1713781143253,"results":"35","hashOfConfig":"23"},{"size":1417,"mtime":1713781143245,"results":"36","hashOfConfig":"23"},{"size":989,"mtime":1713781143259,"results":"37","hashOfConfig":"23"},{"size":1052,"mtime":1713781143251,"results":"38","hashOfConfig":"23"},{"size":898,"mtime":1713781143258,"results":"39","hashOfConfig":"23"},{"size":1026,"mtime":1713781143244,"results":"40","hashOfConfig":"23"},{"size":7807,"mtime":1713935216830,"results":"41","hashOfConfig":"23"},{"size":80448,"mtime":1713927802663,"results":"42","hashOfConfig":"23"},{"size":493,"mtime":1713781143254,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1fj2si1",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"47"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\index.js",[],[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\serviceWorker.js",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\App.js",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\landing.jsx",["113","114","115","116","117","118","119","120"],[],"// landing.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Navigation } from \"./components/navigation\";\r\nimport { Header } from \"./components/header\";\r\nimport { Features } from \"./components/features\";\r\nimport { About } from \"./components/about\";\r\nimport { Services } from \"./components/services\";\r\nimport { Gallery } from \"./components/gallery\";\r\nimport { Testimonials } from \"./components/testimonials\";\r\nimport { Team } from \"./components/Team\";\r\nimport { Contact } from \"./components/contact\";\r\nimport JsonData from \"./data/data.json\";\r\nimport SmoothScroll from \"smooth-scroll\";\r\nimport \"./landing.css\";\r\n\r\nexport const Landing = () => {\r\n    const [landingPageData, setLandingPageData] = useState({});\r\n    useEffect(() => {\r\n      setLandingPageData(JsonData);\r\n    }, []);\r\n  return (\r\n    <div className=\"landing-page\"> {/* Apply the landing-page class */}\r\n      <Header data={landingPageData.Header} />\r\n      <Features data={landingPageData.Features} />\r\n      {/* Other components */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\inventory.js",["121","122"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport InventoryList from './components/InventoryList';\r\nimport './App.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n\r\nimport statusGreen from './images/status-green.png';\r\nimport statusYellow from './images/status-yellow.png';\r\nimport statusRed from './images/status-red.png';\r\n\r\n\r\nimport statusIndicator from './images/status-indicator.png';\r\n\r\n\r\n\r\n// Function to calculate the status based on the expiry date\r\nexport const calculateStatus = (expiryDate) => {\r\n  const parts = expiryDate.split('/');\r\n  const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n  const expiry = new Date(formattedDate);\r\n  const currentDate = new Date();\r\n\r\n  // Set to start of the day for comparison\r\n  currentDate.setHours(0, 0, 0, 0);\r\n  expiry.setHours(0, 0, 0, 0);\r\n\r\n  // Set the current datetime to the start of the day, ignoring hours, minutes and seconds currentDate.setHours(0, 0, 0, 0); \r\n  const diffDays = (expiry - currentDate) / (1000 * 60 * 60 * 24);\r\n\r\n  // if (diffDays <= 0) {\r\n  //   return './images/status-red.png';\r\n  // } else if (diffDays <= 5) {\r\n  //   return './images/status-yellow.png';\r\n  // } else {\r\n  //   return './images/status-green.png';\r\n  // }\r\n\r\n  // set 3 period(safe/reminder/alert) for status\r\n  if (Math.ceil(diffDays) < 0) {\r\n    return statusRed;\r\n  } else if (Math.ceil(diffDays) === 0) {\r\n    return statusRed\r\n  } else if (Math.ceil(diffDays) <= 5) {\r\n    return statusYellow;\r\n  } else {\r\n    return statusGreen;\r\n  }\r\n};\r\n\r\n\r\nexport function Maininventory() {\r\n  const [inventory, setInventory] = useState(() => {\r\n    const storedInventory = localStorage.getItem('inventory');\r\n    return storedInventory ? JSON.parse(storedInventory) : [];\r\n  });\r\n  const [showAddPopup, setShowAddPopup] = useState(false);\r\n  const [showScanReceiptPopup, setShowScanReceiptPopup] = useState(false);\r\n  const [showScanProducePopup, setShowScanProducePopup] = useState(false);\r\n  const [showScanPackagePopup, setShowScanPackagePopup] = useState(false);\r\n  const [expiryPlaceholder, setExpiryPlaceholder] = useState(new Date());\r\n  const [newItem, setNewItem] = useState({\r\n    name: '',\r\n    amount: '',\r\n    spent: '',\r\n    expiryDate: '',\r\n    status: ''\r\n  });\r\n  const [msg, setMsg] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [file, setFile] = useState(null);\r\n  const [imgSrc, setImgSrc] = useState('');\r\n  const [extractedText, setExtractedText] = useState('');\r\n  const [msg1, setMsg1] = useState('');\r\n  const [file1, setFile1] = useState(null);\r\n  const [imgSrc1, setImgSrc1] = useState('');\r\n  const [extractedText1, setExtractedText1] = useState('');\r\n  const [msg2, setMsg2] = useState('');\r\n  const [file2, setFile2] = useState(null);\r\n  const [imgSrc2, setImgSrc2] = useState('');\r\n  const [extractedText2, setExtractedText2] = useState('');\r\n\r\n\r\n  // for status indicator popup \r\n  const [showStatusModal, setShowStatusModal] = useState(false);\r\n\r\n\r\n  // const webcamRef = useRef(null);\r\n\r\n  // // Define handleEditItem function\r\n  // const handleEditItem = (id, updatedItem) => {\r\n  //   // Find the item in the inventory array and update it\r\n  //   const updatedInventory = inventory.map(item => {\r\n  //     if (item.id === id) {\r\n  //       //return { ...item, ...updatedItem };\r\n  //       return updatedItem;\r\n  //     }\r\n  //     return item;\r\n  //   });\r\n  //   setInventory(updatedInventory);\r\n  //   //localStorage.setItem('inventory', JSON.stringify(updatedInventory));\r\n  // };\r\n\r\n  const handleEditItem = (id, updatedItem) => {\r\n    const updatedInventory = inventory.map(item => {\r\n      if (item.id === id) {\r\n        // Update the status based on the new expiry date\r\n        const status = calculateStatus(updatedItem.expiryDate);\r\n        return { ...item, ...updatedItem, status: status };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setInventory(updatedInventory);\r\n    localStorage.setItem('inventory', JSON.stringify(updatedInventory));\r\n  };\r\n\r\n  // Define handleDeleteItem function\r\n  const handleDeleteItem = (id) => {\r\n    // Filter out the item with the specified id from the inventory array\r\n    const updatedInventory = inventory.filter(item => item.id !== id);\r\n    setInventory(updatedInventory);\r\n  };\r\n\r\n\r\n\r\n\r\n  // Determine if any popup is active\r\n  const isPopupActive = showAddPopup || showScanReceiptPopup || showScanProducePopup || showScanPackagePopup;\r\n  const closeAllPopups = () => {\r\n    setShowAddPopup(false);\r\n    setShowScanReceiptPopup(false);\r\n    setShowScanProducePopup(false);\r\n    setShowScanPackagePopup(false);\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const storedInventory = localStorage.getItem('inventory');\r\n    if (storedInventory) {\r\n      setInventory(JSON.parse(storedInventory));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('inventory', JSON.stringify(inventory));\r\n    console.log(\"Inventory saved to local storage:\", inventory);\r\n  }, [inventory]);\r\n\r\n\r\n\r\n  //  useEffect(() => {\r\n  //    // Check expiry dates against current date\r\n  //    const updatedInventory = inventory.map(item => {\r\n  //      // Split the date string and rearrange it to \"YYYY-MM-DD\" format\r\n  //      const parts = item.expiryDate.split('/');\r\n  //      const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n\r\n  //      const expiryDate = new Date(formattedDate);\r\n  //      const currentDate = new Date();\r\n\r\n  //      if (expiryDate < currentDate) {\r\n  //        console.log(\"Item expired:\", item.name);\r\n  //        return { ...item, status: 'Expired' };\r\n  //      } else {\r\n  //        console.log(\"Item not expired:\", item.name);\r\n  //        return { ...item, status: 'Not Expired' };\r\n  //      }\r\n  //    });\r\n  //    setInventory(updatedInventory);\r\n  //  }, []);\r\n\r\n\r\n\r\n\r\n\r\n  //change this to close all\r\n  const togglePopup = (popupType) => {\r\n    setShowAddPopup(false);\r\n    setShowScanReceiptPopup(false);\r\n    setShowScanProducePopup(false);\r\n    setShowScanPackagePopup(false);\r\n\r\n\r\n    setShowStatusModal(false);\r\n\r\n    switch (popupType) {\r\n      case 'add':\r\n        if (!showAddPopup) {\r\n          // If the add popup is about to be opened, reset the expiry date as today\r\n          const today = new Date();\r\n          setExpiryPlaceholder(today);\r\n          setNewItem(prevItem => ({\r\n            ...prevItem,\r\n            name: '',\r\n            amount: '',\r\n            spent: '',\r\n            // Ensure the expiryDate is set to a formatted version of today's date\r\n            expiryDate: today.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' }),\r\n            status: ''\r\n          }));\r\n        }\r\n        setShowAddPopup(!showAddPopup);\r\n        break;\r\n      case 'receipt':\r\n        setShowScanReceiptPopup(!showScanReceiptPopup);\r\n        break;\r\n      case 'produce':\r\n        setShowScanProducePopup(!showScanProducePopup);\r\n        break;\r\n      case 'package':\r\n        setShowScanPackagePopup(!showScanPackagePopup);\r\n        break;\r\n\r\n\r\n      // Status Popup\r\n      case 'statusInfo':\r\n        setShowStatusModal(!showStatusModal);\r\n        break;\r\n\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    if (name === 'status') {\r\n      setNewItem((prevItem) => ({\r\n        ...prevItem,\r\n        status: value\r\n      }));\r\n    } else {\r\n      setNewItem((prevItem) => ({\r\n        ...prevItem,\r\n        [name]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n\r\n  const handleAddItem = () => {\r\n    // Regular expression to check for special characters\r\n    const specialCharsRegex = /[!@#$%^&*(),.?\":{}|<>]/;\r\n\r\n    // Check if any of the required fields are empty\r\n    if (!newItem.name || !newItem.amount || !newItem.spent) {\r\n      // Display an error message or perform any other action\r\n      alert('Please fill in all the fields');\r\n      return; // Exit the function early if validation fails\r\n    }\r\n\r\n    // Check if any field contains special characters\r\n    // if (specialCharsRegex.test(newItem.name) || specialCharsRegex.test(newItem.status)) {\r\n    //   alert('Please do not use special characters in the name or status field');\r\n    //   return;\r\n    // }\r\n    if (specialCharsRegex.test(newItem.name)) {\r\n      alert('Please do not use special characters in the name or status field');\r\n      return;\r\n    }\r\n\r\n    // Check if the amount is a valid number\r\n    const amount = parseFloat(newItem.amount);\r\n    if (isNaN(amount) || amount <= 0) {\r\n      alert('Please enter a valid amount');\r\n      return;\r\n    }\r\n\r\n    // Check if the spent is a valid number\r\n    const spent = parseFloat(newItem.spent);\r\n    if (isNaN(spent) || spent <= 0) {\r\n      alert('Please enter a valid spent amount');\r\n      return;\r\n    }\r\n\r\n    // If expiry date is not provided, use the current date\r\n    let expiryDate = newItem.expiryDate;\r\n    if (!expiryDate) {\r\n      const currentDate = new Date();\r\n      expiryDate = currentDate.toLocaleDateString('en-GB');\r\n    }\r\n\r\n    // Format the spent amount with Australian dollar symbol\r\n    const formattedSpent = `${parseFloat(newItem.spent).toFixed(2)}`;\r\n\r\n\r\n\r\n    // Calculate the status based on the expiry date\r\n    const status = calculateStatus(expiryDate);\r\n\r\n    // Create a new item object\r\n    const newInventoryItem = {\r\n      id: inventory.length + 1,\r\n      name: newItem.name,\r\n      amount: parseFloat(newItem.amount),\r\n      spent: formattedSpent,\r\n      expiryDate: expiryDate,\r\n      status: status\r\n    };\r\n\r\n    // Add the new item to the inventory\r\n    const updatedInventory = [...inventory, newInventoryItem];\r\n    setInventory(updatedInventory);\r\n    localStorage.setItem('inventory', JSON.stringify(updatedInventory));\r\n\r\n    // Check expiry date and update status for the new item\r\n    // const updatedInventoryWithStatus = updatedInventory.map(item => {\r\n    //   if (item.id === newInventoryItem.id) {\r\n    //     const parts = item.expiryDate.split('/');\r\n    //     const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n    //     const expiryDate = new Date(formattedDate);\r\n    //     const currentDate = new Date();\r\n\r\n    //     if (expiryDate < currentDate) {\r\n    //       return { ...item, status: 'Expired' };\r\n    //     } else {\r\n    //       return { ...item, status: 'Not Expired' };\r\n    //     }\r\n    //   }\r\n    //   return item;\r\n    // });\r\n    // setInventory(updatedInventoryWithStatus);\r\n\r\n\r\n    // Reset the form fields and hide the add popup\r\n    setNewItem({\r\n      name: '',\r\n      amount: '',\r\n      spent: '',\r\n      expiryDate: '',\r\n      status: ''\r\n    });\r\n    setShowAddPopup(false);\r\n  };\r\n\r\n  const populateItems = (name, amount, spent, expiryDate, status) => {\r\n    const newInventoryItem = {\r\n      id: inventory.length + 1,\r\n      name: name,\r\n      amount: amount,\r\n      spent: spent,\r\n      expiryDate: expiryDate,\r\n      status: status\r\n    };\r\n    setInventory([...inventory, newInventoryItem]);\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await fetch('https://rohan2121.pythonanywhere.com/', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setName(data.name);\r\n      setImgSrc(data.imgSrc);\r\n      setExtractedText(data.extracted_text);\r\n      setMsg(data.msg);\r\n      setNewItem(prevItem => ({\r\n        ...prevItem,\r\n        name: data.name,\r\n        amount: data.extracted_text,\r\n        spent: data.msg,\r\n        expiryDate: '',\r\n        status: ''\r\n      }));\r\n      if (extractedText !== '' || msg !== '') {\r\n        populateItems(data.name, data.extracted_text, data.msg, '', '');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setMsg('Failed to upload image');\r\n    }\r\n  };\r\n\r\n  const handleFileChange1 = (e) => {\r\n    setFile1(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload2 = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file1', file1);\r\n    setShowScanReceiptPopup(false); // Close the popup\r\n    try {\r\n      const response = await fetch('https://new12222-18275757747f.herokuapp.com/pred', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setImgSrc1(data.imgSrc1);\r\n      setExtractedText1(data.extracted_text1);\r\n      setMsg1(data.msg1);\r\n      const daysToAdd = parseInt(data.msg1, 10);\r\n      const currentDate = new Date();\r\n      currentDate.setDate(currentDate.getDate() + daysToAdd);\r\n      const formattedDate = `${currentDate.getDate()}/${currentDate.getMonth() + 1}/${currentDate.getFullYear()}`;\r\n      if (extractedText1 !== '' || msg1 !== '') {\r\n        populateItems(data.extracted_text1, '', '', formattedDate, '');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setMsg1('Failed to upload image');\r\n    }\r\n  };\r\n\r\n  const handleFileChange2 = (e) => {\r\n    setFile2(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload3 = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file2', file2);\r\n\r\n    try {\r\n      const response = await fetch('https://rohan2121.pythonanywhere.com/recpt', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setImgSrc2(data.imgSrc2);\r\n      setExtractedText2(data.extracted_text2);\r\n      setMsg2('Image uploaded successfully!');\r\n      setNewItem(prevItem => ({\r\n        ...prevItem,\r\n        name: '',\r\n        amount: '',\r\n        spent: '',\r\n        expiryDate: data.extracted_text2,\r\n        status: ''\r\n      }));\r\n      if (extractedText2 !== '' || msg2 !== '') {\r\n        populateItems('', '', '', data.extracted_text2, '');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setMsg('Failed to upload image');\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n\r\n    <div>\r\n      {isPopupActive && <div className=\"modal-overlay\" onClick={closeAllPopups}></div>}\r\n      <div className=\"main-content\"></div>\r\n      <div className=\"toolbar\">\r\n        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n          <img src=\"ProjectLogo.png\" alt=\"App Logo\" style={{ width: '40px', height: '40px', marginRight: '10px' }} />\r\n          <span style={{ color: 'green', fontWeight: 'bold' }}>EcoEats</span>\r\n        </div>\r\n        <div className=\"toolbardiv\">\r\n          <button onClick={() => console.log(\"Recipes clicked\")}>Recipes</button>\r\n          <button onClick={() => console.log(\"Information clicked\")}>Information</button>\r\n          <button onClick={() => console.log(\"Recycling Agencies Clicked\")}>Recycling Agencies</button>\r\n          <button onClick={() => console.log(\"Check My Knowledge Clicked\")}>Check My Knowledge</button>\r\n        </div>\r\n        <div></div>\r\n      </div>\r\n      <div className=\"App\">\r\n        <header></header>\r\n        <InventoryList\r\n          inventory={inventory}\r\n          onEdit={handleEditItem}\r\n          onDelete={handleDeleteItem}\r\n\r\n          togglePopup={togglePopup} // Add this line to pass the function as a prop\r\n        />\r\n        <div className=\"actions\">\r\n          <button className=\"add-button\" onClick={() => togglePopup('add')}>Add Manually</button>\r\n          <div className=\"scan-buttons\">\r\n            <button onClick={() => togglePopup('receipt')}>Scan Receipt</button>\r\n            {/* <button onClick={() => togglePopup('package')}>Scan Package</button>\r\n            <button onClick={() => togglePopup('produce')}>Scan Fresh Produce</button> */}\r\n          </div>\r\n\r\n\r\n\r\n          {showAddPopup && (\r\n            <div\r\n              className=\"modal-overlay\"\r\n              onClick={() => setShowAddPopup(false)}\r\n            ></div>\r\n          )}\r\n\r\n\r\n\r\n          {/* Add Popup */}\r\n          {showAddPopup && (\r\n\r\n            <div className=\"popup large-popup\">\r\n              <h2>Add New Item</h2>\r\n              <div className=\"form-group\">\r\n                <label>Name:</label>\r\n                <input type=\"text\" name=\"name\" value={newItem.name} onChange={handleInputChange} />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Quantity:</label>\r\n                <input type=\"text\" name=\"amount\" value={newItem.amount} onChange={handleInputChange} />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <div className=\"form-group\">\r\n                  <label>Price:</label>\r\n                  <input type=\"text\" name=\"spent\" value={newItem.spent} onChange={handleInputChange} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Expiry Date:</label>\r\n                <DatePicker\r\n                  selected={expiryPlaceholder}\r\n                  onChange={(date) => {\r\n                    // Format the selected date\r\n                    const formattedDate = date.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });\r\n                    // Set the formatted date to the expiryPlaceholder\r\n                    setExpiryPlaceholder(date);\r\n                    // Update the expiry date in newItem\r\n                    setNewItem(prevItem => ({ ...prevItem, expiryDate: formattedDate }));\r\n                  }}\r\n                  dateFormat=\"dd MMM yyyy\"\r\n\r\n                  // Add a specific class name for date picker in adding item mode\r\n                  className=\"date-picker add-date-picker\"\r\n                />\r\n              </div>\r\n\r\n              {/* scan  bottons to get expiry date directly\r\n              <div className=\"scan-buttons\">\r\n                <button onClick={() => togglePopup('package')}>Scan Package</button>\r\n                <button onClick={() => togglePopup('produce')}>Scan Fresh Produce</button>\r\n              </div>\r\n              */}\r\n\r\n\r\n              <div className=\"form-actions\">\r\n                <button onClick={handleAddItem}>Save</button>\r\n                <button onClick={() => togglePopup('add')}>Cancel</button>\r\n              </div>\r\n            </div>\r\n\r\n          )}\r\n\r\n          {/* Scan Receipt Popup */}\r\n          {showScanReceiptPopup && (\r\n\r\n            <div className=\"popup\">\r\n              <h2>Scan Receipt</h2>\r\n              <div className=\"scan-options\">\r\n                <form onSubmit={handleUpload} encType=\"multipart/form-data\">\r\n                  <input type=\"file\" name=\"file\" onChange={handleFileChange} />\r\n                  <input type=\"submit\" value=\"Upload\" />\r\n                </form>\r\n                {imgSrc && <img src={imgSrc} alt=\"Uploaded\" />}\r\n              </div>\r\n              <button onClick={() => togglePopup('receipt')}>Cancel</button>\r\n            </div>\r\n\r\n          )}\r\n\r\n          {/* Scan Package Popup */}\r\n          {showScanPackagePopup && (\r\n\r\n            <div className=\"popup\">\r\n              <h2>Scan Package</h2>\r\n              <div className=\"scan-options\">\r\n                <form onSubmit={handleUpload3} encType=\"multipart/form-data\">\r\n                  <input type=\"file\" name=\"file2\" onChange={handleFileChange2} />\r\n                  <input type=\"submit\" value=\"Upload\" />\r\n                </form>\r\n                {imgSrc2 && <img src={imgSrc2} alt=\"Uploaded\" />}\r\n              </div>\r\n              <button onClick={() => togglePopup('package')}>Cancel</button>\r\n            </div>\r\n\r\n          )}\r\n\r\n          {/* Scan Fresh Produce Popup */}\r\n          {showScanProducePopup && (\r\n\r\n            <div className=\"popup\">\r\n              <h2>Scan Produce</h2>\r\n\r\n              <div className=\"scan-options\">\r\n                <form id=\"uploadForm\" onSubmit={handleUpload2} encType=\"multipart/form-data\">\r\n                  <input type=\"file\" name=\"file1\" onChange={handleFileChange1} />\r\n                  <input type=\"submit\" value=\"Upload\" />\r\n                </form>\r\n                {imgSrc1 && <img src={imgSrc1} alt=\"Uploaded\" />}\r\n                {/* populateItems(extractedText1, '', '', msg1, ''); */}\r\n              </div>\r\n              {/* <button onClick={() => {\r\n              document.getElementById(\"uploadForm\").submit();\r\n              populateItems(extractedText1, '', '', msg1, '');\r\n              }}>Upload</button> */}\r\n              <button onClick={() => togglePopup('produce')}>Cancel</button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Show Status Indicator Popup */}\r\n          {showStatusModal && (\r\n            <div className=\"popup status-popup\">\r\n              <div className=\"content\">\r\n                <img src={statusIndicator} alt=\"Status Indicator\"  />\r\n              </div>\r\n              <button className=\"center-button\" onClick={() => togglePopup('statusInfo')}>Close</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Maininventory;","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\recipes.js",["123","124"],[],"import './recipe.css';\r\nimport InventoryList from '../components/InventoryList';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// SearchBar Component\r\nconst SearchBar = ({ onSearch, onInputChange, selectedItems, onRemoveSelected, onAddToSearch }) => {\r\n  const [input, setInput] = useState('');\r\n\r\n  const handleInputChange = (value) => {\r\n    setInput(value);\r\n    onInputChange(value);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && input.trim() !== '') {\r\n      onSearch();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-container\">\r\n      <div className=\"selected-items-box\">\r\n        {selectedItems.map((item, index) => (\r\n          <div key={index} className=\"selected-item\">\r\n            <span>{item}</span>\r\n            <button onClick={() => onRemoveSelected(item)}>×</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div>\r\n      <input\r\n        className=\"search-input\"\r\n        type=\"text\"\r\n        placeholder=\"Add more items to your search...\"\r\n        value={input}\r\n        onChange={(e) => handleInputChange(e.target.value)}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n            <button className=\"add-to-search-button\" onClick={() => onAddToSearch(input)}>Add to Search</button>\r\n           <div>\r\n              <button className=\"search-button\" onClick={onSearch}>Search Recipes</button>\r\n            </div>\r\n</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// RecipeCard Component\r\nconst RecipeCard = ({ recipe }) => {\r\n  return (\r\n    <div className=\"recipe-card\">\r\n      <div className=\"recipe-image-placeholder\"></div>\r\n      <div className=\"recipe-info\">\r\n        <h2 className=\"recipe-title\">{recipe.title}</h2>\r\n        <p className=\"recipe-ingredients\">{recipe.ingredients}</p>\r\n        <p className=\"recipe-time\">{recipe.time}</p>\r\n        <p className=\"recipe-has-ingredients\">{recipe.hasIngredients}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Recipes Component\r\nexport const Recipes = () => {\r\n  const [input, setInput] = useState('');\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [inventory, setInventory] = useState([]);\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [pyodideLoaded, setPyodideLoaded] = useState(false);\r\n  const [displayedInventory, setDisplayedInventory] = useState([]);\r\n\r\n  const handleInputChange = (value) => {\r\n    setInput(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const storedInventory = localStorage.getItem('inventory');\r\n      if (storedInventory) {\r\n        setInventory(JSON.parse(storedInventory));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing inventory:', error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setDisplayedInventory([...inventory]); // Create a shallow copy of the inventory and set it to displayedInventory\r\n  }, [inventory]);\r\n\r\n  useEffect(() => {\r\n    const script = document.createElement('script');\r\n    script.src = 'https://cdn.jsdelivr.net/pyodide/v0.21.2/full/pyodide.js';\r\n    script.async = true;\r\n    script.onload = async () => {\r\n      window.languagePluginUrl = 'https://cdn.jsdelivr.net/pyodide/v0.21.2/full/';\r\n      window.pyodide = await window.loadPyodide({\r\n        indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.21.2/full/',\r\n      });\r\n      setPyodideLoaded(true);\r\n    };\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const runPythonCode = async () => {\r\n      if (pyodideLoaded) {\r\n        const ingredients = ['Egg']; // Modify this to use dynamic ingredients\r\n\r\n        const fetchWithBackoff = async (url, options, delay) => {\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          return await fetch(url, options);\r\n        };\r\n\r\n        const fetchRecipes = async () => {\r\n          const url = \"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/findByIngredients\";\r\n          const headers = {\r\n            \"X-RapidAPI-Key\": \"590374f09cmshedcb45928ac60bap18e369jsn8f0c8e3fe0a0\",\r\n            \"X-RapidAPI-Host\": \"spoonacular-recipe-food-nutrition-v1.p.rapidapi.com\"\r\n          };\r\n          const querystring = {\r\n            \"ingredients\": ingredients.join(','),\r\n            \"number\": \"15\",\r\n            \"ranking\": \"1\",\r\n            \"ignorePantry\": \"true\"\r\n          };\r\n\r\n          const options = {\r\n            method: 'GET',\r\n            headers: headers,\r\n            params: querystring\r\n          };\r\n\r\n          try {\r\n            const response = await fetchWithBackoff(url, options, 1000); // Initial delay of 1 second\r\n            console.log(\"Response status:\", response.status); // Log the response status\r\n            if (!response.ok) {\r\n              if (response.status === 429) {\r\n                throw new Error('Too many requests');\r\n              } else {\r\n                throw new Error('Failed to fetch data');\r\n              }\r\n            }\r\n            const data = await response.json();\r\n            console.log(\"Response data:\", data); // Log the response data\r\n            return data;\r\n          } catch (error) {\r\n            console.error(\"Error fetching recipes:\", error.message);\r\n            throw error;\r\n          }\r\n        };\r\n\r\n        try {\r\n          const result = await fetchRecipes();\r\n          console.log(result);\r\n          setRecipes(result);\r\n        } catch (error) {\r\n          console.error(\"Error fetching recipes:\", error.message);\r\n        }\r\n      }\r\n    };\r\n\r\n    runPythonCode();\r\n  }, [pyodideLoaded]);\r\n\r\n  const finalizeInventory = () => {\r\n    // Update the main inventory with the displayed inventory\r\n    setInventory([...displayedInventory]);\r\n\r\n    // Optionally, you can also save the updated inventory to localStorage\r\n    try {\r\n      localStorage.setItem('inventory', JSON.stringify(displayedInventory));\r\n      alert(\"Your inventory state is updated!\")\r\n    } catch (error) {\r\n      console.error('Error saving inventory to localStorage:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (input.toLowerCase().includes('papaya')) {\r\n      setRecipes(sampleRecipes);\r\n      console.log(input)\r\n    }\r\n  };\r\n\r\n  const sampleRecipes = [\r\n    { title: 'Egg Salad Sandwich', ingredients: 'Bread, Eggs, Mayonnaise', time: '10 mins', hasIngredients: 'You have 2/3 ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Deviled Eggs', ingredients: 'Eggs, Mayonnaise, Mustard', time: '20 mins', hasIngredients: 'You have all ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Scrambled Eggs with Toast', ingredients: 'Bread, Eggs, Butter', time: '15 mins', hasIngredients: 'You have all ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Egg Fried Rice', ingredients: 'Rice, Eggs, Soy Sauce', time: '15 mins', hasIngredients: 'You have 2/3 ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Egg and Veggie Breakfast Burrito', ingredients: 'Tortilla, Eggs, Bell Peppers', time: '20 mins', hasIngredients: 'You have 2/3 ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Egg and Spinach Omelette', ingredients: 'Eggs, Spinach, Cheese', time: '10 mins', hasIngredients: 'You have 2/3 ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Egg McMuffin', ingredients: 'English Muffin, Eggs, Canadian Bacon', time: '15 mins', hasIngredients: 'You have 2/3 ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Egg and Bacon Breakfast Hash', ingredients: 'Potatoes, Eggs, Bacon', time: '25 mins', hasIngredients: 'You have all ingredients', imageUrl: 'placeholder-image.jpg' },\r\n    { title: 'Egg and Avocado Toast', ingredients: 'Bread, Eggs, Avocado', time: '10 mins', hasIngredients: 'You have 2/3 ingredients', imageUrl: 'placeholder-image.jpg' }\r\n  ];\r\n\r\nconst handleAddToSearch = (itemName) => {\r\n  // Find the item in the displayed inventory\r\n  const selectedItem = displayedInventory.find(item => item.name === itemName);\r\n  if (selectedItem) {\r\n    // Reduce the quantity by 1\r\n    const updatedQuantity = selectedItem.amount - 1;\r\n\r\n    if (updatedQuantity < 0) {\r\n      // Check if the updated quantity is less than 0\r\n      // Display an alert\r\n      alert(\"Oops! Sorry, you ran out of this item.\");\r\n    } else {\r\n      // Reduce the quantity by 1\r\n      const updatedItem = { ...selectedItem, amount: updatedQuantity };\r\n      // Update the displayed inventory\r\n      setDisplayedInventory(prevInventory => {\r\n        // Find the index of the updated item in the inventory array\r\n        const index = prevInventory.findIndex(item => item.name === itemName);\r\n        if (index !== -1) {\r\n          // Create a copy of the previous inventory array\r\n          const updatedInventory = [...prevInventory];\r\n          // Update the item at the found index with the updated item\r\n          updatedInventory[index] = updatedItem;\r\n          return updatedInventory;\r\n        }\r\n        return prevInventory;\r\n      });\r\n\r\n      if (updatedQuantity >= 0) {\r\n        // Update the selected items only if quantity is greater than or equal to 0\r\n        setSelectedItems(prevItems => [...prevItems, itemName]);\r\n        setInput(prevInput => {\r\n          const trimmedInput = prevInput.trim();\r\n          return trimmedInput ? trimmedInput + ' ' + itemName : itemName;\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n  const handleRemoveSelected = (itemName) => {\r\n    setSelectedItems(prevItems => prevItems.filter(item => item !== itemName));\r\n    setInput(prevInput => prevInput.replace(itemName, '').trim()); // Remove the item name from the search bar input\r\n  };\r\n\r\n\r\n  //Filter component\r\n// Define state for the filter\r\nconst [filter, setFilter] = useState({\r\n  column: 'name', // Default filter column\r\n  keyword: '',    // Default filter keyword\r\n  applyFilter: false // Flag to indicate if filter should be applied\r\n});\r\n\r\n// Inside the Recipes component\r\n\r\n// Define applyFilter function to trigger the filter application\r\nconst applyFilter = () => {\r\n  setFilter(prevFilter => ({ ...prevFilter, applyFilter: true }));\r\n};\r\n\r\n// Filter the displayed inventory based on the selected filter when \"Filter\" button is clicked\r\nuseEffect(() => {\r\n  if (filter.applyFilter) {\r\n    setDisplayedInventory(prevInventory => {\r\n      return prevInventory.filter(item => {\r\n        const { column, keyword } = filter;\r\n        // Apply filtering logic based on the selected column\r\n        if (column === 'name') {\r\n          return item.name.toLowerCase().includes(keyword.toLowerCase());\r\n        } else if (column === 'quantity') {\r\n          return item.amount.toString().toLowerCase().includes(keyword.toLowerCase());\r\n        } else if (column === 'status') {\r\n          // Assuming status is a string property of the item\r\n          return item.status.toLowerCase().includes(keyword.toLowerCase());\r\n        }\r\n        return true; // Return true by default to include all items if no filter applied\r\n      });\r\n    });\r\n  }\r\n}, [filter]);\r\n\r\n// Function to handle changes in filter selection\r\nconst handleFilterChange = (column, keyword) => {\r\n  setFilter({ column, keyword, applyFilter: false }); // Set applyFilter to false when filter changes\r\n};\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"inventory-container\">\r\n      <div class=\"top-buttons\">\r\n      <button class=\"finalize-button\" onClick={finalizeInventory}>Finalize</button>\r\n      <button class=\"finalize-button\" onClick={applyFilter}>Filter</button>\r\n      </div>\r\n        <table class=\"inventory-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Quantity</th>\r\n              <th>Status</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"inventory-body\">\r\n            {displayedInventory.map((item) => (\r\n              <tr key={item.id}>\r\n                <td>{item.name}</td>\r\n                <td>{item.amount}</td>\r\n                <td>\r\n                  <img\r\n                    src={item.status}\r\n                    alt=\"Status Indicator\"\r\n                    className=\"status-image\"\r\n                    style={{ width: '55px', height: 'auto' }}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button className=\"add-to-search-button\" onClick={() => handleAddToSearch(item.name)}>Add to Search</button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n\r\n      </div>\r\n      <div className=\"App\">\r\n        <SearchBar\r\n          onInputChange={handleInputChange}\r\n          onSearch={handleSearch}\r\n          selectedItems={selectedItems}\r\n          onRemoveSelected={handleRemoveSelected}\r\n          onAddToSearch={handleAddToSearch}\r\n        />\r\n        <div className=\"recipes-container\">\r\n          {recipes.map((recipe, index) => (\r\n            <RecipeCard key={index} recipe={recipe} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\recycling.js",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\information.js",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\knowledge.js",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\contact.jsx",["125","126","127"],[],"import { useState } from \"react\";\r\nimport emailjs from \"emailjs-com\";\r\nimport React from \"react\";\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\nexport const Contact = (props) => {\r\n  const [{ name, email, message }, setState] = useState(initialState);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n  const clearState = () => setState({ ...initialState });\r\n  \r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(name, email, message);\r\n    \r\n    {/* replace below with your own Service ID, Template ID and Public Key from your EmailJS account */ }\r\n    \r\n    emailjs\r\n      .sendForm(\"YOUR_SERVICE_ID\", \"YOUR_TEMPLATE_ID\", e.target, \"YOUR_PUBLIC_KEY\")\r\n      .then(\r\n        (result) => {\r\n          console.log(result.text);\r\n          clearState();\r\n        },\r\n        (error) => {\r\n          console.log(error.text);\r\n        }\r\n      );\r\n  };\r\n  return (\r\n    <div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\navigation.jsx",["128"],[],"import React from \"react\";\r\nimport logo from \"../ProjectLogo.png\"; // Import the image\r\n\r\nexport const Navigation = (props) => {\r\n  return (\r\n    <nav id=\"menu\" className=\"navbar navbar-default navbar-fixed-top\">\r\n      <div className=\"container\">\r\n        <div className=\"navbar-header\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"navbar-toggle collapsed\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#bs-example-navbar-collapse-1\"\r\n          >\r\n            {\" \"}\r\n            <span className=\"sr-only\">Toggle navigation</span>{\" \"}\r\n            <span className=\"icon-bar\"></span>{\" \"}\r\n            <span className=\"icon-bar\"></span>{\" \"}\r\n            <span className=\"icon-bar\"></span>{\" \"}\r\n          </button>\r\n          {/* Container for the logo and text */}\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <img src={logo} style={{ width: '80px', height: '60px', marginRight: '0px' }} />\r\n            <a className=\"navbar-brand page-scroll\" href=\"/\">\r\n              Ecoeats\r\n            </a>{\" \"}\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"collapse navbar-collapse\"\r\n          id=\"bs-example-navbar-collapse-1\"\r\n        >\r\n          <ul className=\"nav navbar-nav navbar-right\">\r\n            <li>\r\n              <a href=\"/inventory\" >\r\n                Inventory\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"/recipes\" className=\"page-scroll\">\r\n              Recipes\r\n              </a>\r\n            </li>\r\n\r\n            <li>\r\n              <a href=\"/information\" className=\"page-scroll\">\r\n              Information\r\n              </a>\r\n            </li>\r\n\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\features.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\header.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\about.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\testimonials.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\gallery.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\services.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\Team.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\components\\InventoryList.js",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\Pages\\Page\\au-map.jsx",[],[],"C:\\Users\\chen\\Desktop\\version42202\\frontend\\src\\components\\image.jsx",[],[],{"ruleId":"129","severity":1,"message":"130","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":20},{"ruleId":"129","severity":1,"message":"133","line":6,"column":10,"nodeType":"131","messageId":"132","endLine":6,"endColumn":15},{"ruleId":"129","severity":1,"message":"134","line":7,"column":10,"nodeType":"131","messageId":"132","endLine":7,"endColumn":18},{"ruleId":"129","severity":1,"message":"135","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":17},{"ruleId":"129","severity":1,"message":"136","line":9,"column":10,"nodeType":"131","messageId":"132","endLine":9,"endColumn":22},{"ruleId":"129","severity":1,"message":"137","line":10,"column":10,"nodeType":"131","messageId":"132","endLine":10,"endColumn":14},{"ruleId":"129","severity":1,"message":"138","line":11,"column":10,"nodeType":"131","messageId":"132","endLine":11,"endColumn":17},{"ruleId":"129","severity":1,"message":"139","line":13,"column":8,"nodeType":"131","messageId":"132","endLine":13,"endColumn":20},{"ruleId":"129","severity":1,"message":"140","line":1,"column":38,"nodeType":"131","messageId":"132","endLine":1,"endColumn":44},{"ruleId":"129","severity":1,"message":"141","line":70,"column":10,"nodeType":"131","messageId":"132","endLine":70,"endColumn":14},{"ruleId":"129","severity":1,"message":"142","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":21},{"ruleId":"129","severity":1,"message":"143","line":286,"column":7,"nodeType":"131","messageId":"132","endLine":286,"endColumn":25},{"ruleId":"129","severity":1,"message":"144","line":13,"column":9,"nodeType":"131","messageId":"132","endLine":13,"endColumn":21},{"ruleId":"129","severity":1,"message":"145","line":20,"column":9,"nodeType":"131","messageId":"132","endLine":20,"endColumn":21},{"ruleId":"146","severity":1,"message":"147","line":24,"column":5,"nodeType":"148","messageId":"149","endLine":24,"endColumn":106},{"ruleId":"150","severity":1,"message":"151","line":23,"column":13,"nodeType":"152","endLine":23,"endColumn":93},"no-unused-vars","'Navigation' is defined but never used.","Identifier","unusedVar","'About' is defined but never used.","'Services' is defined but never used.","'Gallery' is defined but never used.","'Testimonials' is defined but never used.","'Team' is defined but never used.","'Contact' is defined but never used.","'SmoothScroll' is defined but never used.","'useRef' is defined but never used.","'name' is assigned a value but never used.","'InventoryList' is defined but never used.","'handleFilterChange' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]
=======
[{"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\index.js":"1","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\App.js":"2","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\serviceWorker.js":"3","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\landing.jsx":"4","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\inventory.js":"5","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\recipes.js":"6","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\recycling.js":"7","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\information.js":"8","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\knowledge.js":"9","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\navigation.jsx":"10","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\contact.jsx":"11","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\features.jsx":"12","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\header.jsx":"13","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\gallery.jsx":"14","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\about.jsx":"15","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\testimonials.jsx":"16","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\services.jsx":"17","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\Team.jsx":"18","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\components\\InventoryList.js":"19","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\image.jsx":"20","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\au-map.jsx":"21"},{"size":520,"mtime":1713341286013,"results":"22","hashOfConfig":"23"},{"size":2128,"mtime":1713341285804,"results":"24","hashOfConfig":"23"},{"size":5227,"mtime":1713341286013,"results":"25","hashOfConfig":"23"},{"size":1013,"mtime":1713786843809,"results":"26","hashOfConfig":"23"},{"size":21178,"mtime":1713851993003,"results":"27","hashOfConfig":"23"},{"size":12994,"mtime":1713777572825,"results":"28","hashOfConfig":"23"},{"size":1162,"mtime":1713341285807,"results":"29","hashOfConfig":"23"},{"size":6664,"mtime":1713782912225,"results":"30","hashOfConfig":"23"},{"size":1159,"mtime":1713341285807,"results":"31","hashOfConfig":"23"},{"size":1801,"mtime":1713782912227,"results":"32","hashOfConfig":"23"},{"size":1057,"mtime":1713351717655,"results":"33","hashOfConfig":"23"},{"size":716,"mtime":1713341285998,"results":"34","hashOfConfig":"23"},{"size":1181,"mtime":1713786786176,"results":"35","hashOfConfig":"23"},{"size":1052,"mtime":1713341285998,"results":"36","hashOfConfig":"23"},{"size":1417,"mtime":1713341285998,"results":"37","hashOfConfig":"23"},{"size":989,"mtime":1713341286013,"results":"38","hashOfConfig":"23"},{"size":898,"mtime":1713341286013,"results":"39","hashOfConfig":"23"},{"size":1026,"mtime":1713341285998,"results":"40","hashOfConfig":"23"},{"size":6412,"mtime":1713852557836,"results":"41","hashOfConfig":"23"},{"size":493,"mtime":1713341286013,"results":"42","hashOfConfig":"23"},{"size":80456,"mtime":1713782912222,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"czwm53",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\index.js",[],[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\App.js",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\serviceWorker.js",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\landing.jsx",["111","112","113","114","115","116","117","118","119"],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\inventory.js",["120","121","122","123"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport InventoryList from './components/InventoryList';\r\nimport './App.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n\r\nimport statusGreen from './images/status-green.png';\r\nimport statusYellow from './images/status-yellow.png';\r\nimport statusRed from './images/status-red.png';\r\n\r\n\r\nimport statusIndicator from './images/status-indicator.png';\r\n\r\n\r\n\r\n// Function to calculate the status based on the expiry date\r\nexport const calculateStatus = (expiryDate) => {\r\n  const parts = expiryDate.split('/');\r\n  const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n  const expiry = new Date(formattedDate);\r\n  const currentDate = new Date();\r\n\r\n  // Set to start of the day for comparison\r\n  currentDate.setHours(0, 0, 0, 0);\r\n  expiry.setHours(0, 0, 0, 0);\r\n\r\n  // Set the current datetime to the start of the day, ignoring hours, minutes and seconds currentDate.setHours(0, 0, 0, 0); \r\n  const diffDays = (expiry - currentDate) / (1000 * 60 * 60 * 24);\r\n\r\n  // if (diffDays <= 0) {\r\n  //   return './images/status-red.png';\r\n  // } else if (diffDays <= 5) {\r\n  //   return './images/status-yellow.png';\r\n  // } else {\r\n  //   return './images/status-green.png';\r\n  // }\r\n\r\n  // set 3 period(safe/reminder/alert) for status\r\n  if (Math.ceil(diffDays) < 0) {\r\n    return statusRed;\r\n  } else if (Math.ceil(diffDays) === 0) {\r\n    return statusRed\r\n  } else if (Math.ceil(diffDays) <= 5) {\r\n    return statusYellow;\r\n  } else {\r\n    return statusGreen;\r\n  }\r\n};\r\n\r\n\r\nexport function Maininventory() {\r\n  const [inventory, setInventory] = useState(() => {\r\n    const storedInventory = localStorage.getItem('inventory');\r\n    return storedInventory ? JSON.parse(storedInventory) : [];\r\n  });\r\n  const [showAddPopup, setShowAddPopup] = useState(false);\r\n  const [showScanReceiptPopup, setShowScanReceiptPopup] = useState(false);\r\n  const [showScanProducePopup, setShowScanProducePopup] = useState(false);\r\n  const [showScanPackagePopup, setShowScanPackagePopup] = useState(false);\r\n  const [expiryPlaceholder, setExpiryPlaceholder] = useState(new Date());\r\n  const [newItem, setNewItem] = useState({\r\n    name: '',\r\n    amount: '',\r\n    spent: '',\r\n    expiryDate: '',\r\n    status: ''\r\n  });\r\n  const [msg, setMsg] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [file, setFile] = useState(null);\r\n  const [imgSrc, setImgSrc] = useState('');\r\n  const [extractedText, setExtractedText] = useState('');\r\n  const [msg1, setMsg1] = useState('');\r\n  const [file1, setFile1] = useState(null);\r\n  const [imgSrc1, setImgSrc1] = useState('');\r\n  const [extractedText1, setExtractedText1] = useState('');\r\n  const [msg2, setMsg2] = useState('');\r\n  const [file2, setFile2] = useState(null);\r\n  const [imgSrc2, setImgSrc2] = useState('');\r\n  const [extractedText2, setExtractedText2] = useState('');\r\n\r\n\r\n  // for status indicator popup \r\n  const [showStatusModal, setShowStatusModal] = useState(false);\r\n\r\n\r\n  // const webcamRef = useRef(null);\r\n\r\n  // // Define handleEditItem function\r\n  // const handleEditItem = (id, updatedItem) => {\r\n  //   // Find the item in the inventory array and update it\r\n  //   const updatedInventory = inventory.map(item => {\r\n  //     if (item.id === id) {\r\n  //       //return { ...item, ...updatedItem };\r\n  //       return updatedItem;\r\n  //     }\r\n  //     return item;\r\n  //   });\r\n  //   setInventory(updatedInventory);\r\n  //   //localStorage.setItem('inventory', JSON.stringify(updatedInventory));\r\n  // };\r\n\r\n  const handleEditItem = (id, updatedItem) => {\r\n    const updatedInventory = inventory.map(item => {\r\n      if (item.id === id) {\r\n        // Update the status based on the new expiry date\r\n        const status = calculateStatus(updatedItem.expiryDate);\r\n        return { ...item, ...updatedItem, status: status };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setInventory(updatedInventory);\r\n    localStorage.setItem('inventory', JSON.stringify(updatedInventory));\r\n  };\r\n\r\n  // Define handleDeleteItem function\r\n  const handleDeleteItem = (id) => {\r\n    // Filter out the item with the specified id from the inventory array\r\n    const updatedInventory = inventory.filter(item => item.id !== id);\r\n    setInventory(updatedInventory);\r\n  };\r\n\r\n\r\n\r\n\r\n  // Determine if any popup is active\r\n  const isPopupActive = showAddPopup || showScanReceiptPopup || showScanProducePopup || showScanPackagePopup;\r\n  const closeAllPopups = () => {\r\n    setShowAddPopup(false);\r\n    setShowScanReceiptPopup(false);\r\n    setShowScanProducePopup(false);\r\n    setShowScanPackagePopup(false);\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const storedInventory = localStorage.getItem('inventory');\r\n    if (storedInventory) {\r\n      setInventory(JSON.parse(storedInventory));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('inventory', JSON.stringify(inventory));\r\n    console.log(\"Inventory saved to local storage:\", inventory);\r\n  }, [inventory]);\r\n\r\n\r\n\r\n  //  useEffect(() => {\r\n  //    // Check expiry dates against current date\r\n  //    const updatedInventory = inventory.map(item => {\r\n  //      // Split the date string and rearrange it to \"YYYY-MM-DD\" format\r\n  //      const parts = item.expiryDate.split('/');\r\n  //      const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n\r\n  //      const expiryDate = new Date(formattedDate);\r\n  //      const currentDate = new Date();\r\n\r\n  //      if (expiryDate < currentDate) {\r\n  //        console.log(\"Item expired:\", item.name);\r\n  //        return { ...item, status: 'Expired' };\r\n  //      } else {\r\n  //        console.log(\"Item not expired:\", item.name);\r\n  //        return { ...item, status: 'Not Expired' };\r\n  //      }\r\n  //    });\r\n  //    setInventory(updatedInventory);\r\n  //  }, []);\r\n\r\n\r\n\r\n\r\n\r\n  //change this to close all\r\n  const togglePopup = (popupType) => {\r\n    setShowAddPopup(false);\r\n    setShowScanReceiptPopup(false);\r\n    setShowScanProducePopup(false);\r\n    setShowScanPackagePopup(false);\r\n\r\n\r\n    setShowStatusModal(false);\r\n\r\n    switch (popupType) {\r\n      case 'add':\r\n        if (!showAddPopup) {\r\n          // If the add popup is about to be opened, reset the expiry date as today\r\n          const today = new Date();\r\n          setExpiryPlaceholder(today);\r\n          setNewItem(prevItem => ({\r\n            ...prevItem,\r\n            name: '',\r\n            amount: '',\r\n            spent: '',\r\n            // Ensure the expiryDate is set to a formatted version of today's date\r\n            expiryDate: today.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' }),\r\n            status: ''\r\n          }));\r\n        }\r\n        setShowAddPopup(!showAddPopup);\r\n        break;\r\n      case 'receipt':\r\n        setShowScanReceiptPopup(!showScanReceiptPopup);\r\n        break;\r\n      case 'produce':\r\n        setShowScanProducePopup(!showScanProducePopup);\r\n        break;\r\n      case 'package':\r\n        setShowScanPackagePopup(!showScanPackagePopup);\r\n        break;\r\n\r\n\r\n      // Status Popup\r\n      case 'statusInfo':\r\n        setShowStatusModal(!showStatusModal);\r\n        break;\r\n\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    if (name === 'status') {\r\n      setNewItem((prevItem) => ({\r\n        ...prevItem,\r\n        status: value\r\n      }));\r\n    } else {\r\n      setNewItem((prevItem) => ({\r\n        ...prevItem,\r\n        [name]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n\r\n  const handleAddItem = () => {\r\n    // Regular expression to check for special characters\r\n    const specialCharsRegex = /[!@#$%^&*(),.?\":{}|<>]/;\r\n\r\n    // Check if any of the required fields are empty\r\n    if (!newItem.name || !newItem.amount || !newItem.spent) {\r\n      // Display an error message or perform any other action\r\n      alert('Please fill in all the fields');\r\n      return; // Exit the function early if validation fails\r\n    }\r\n\r\n    // Check if any field contains special characters\r\n    // if (specialCharsRegex.test(newItem.name) || specialCharsRegex.test(newItem.status)) {\r\n    //   alert('Please do not use special characters in the name or status field');\r\n    //   return;\r\n    // }\r\n    if (specialCharsRegex.test(newItem.name)) {\r\n      alert('Please do not use special characters in the name or status field');\r\n      return;\r\n    }\r\n\r\n    // Check if the amount is a valid number\r\n    const amount = parseFloat(newItem.amount);\r\n    if (isNaN(amount) || amount <= 0) {\r\n      alert('Please enter a valid amount');\r\n      return;\r\n    }\r\n\r\n    // Check if the spent is a valid number\r\n    const spent = parseFloat(newItem.spent);\r\n    if (isNaN(spent) || spent <= 0) {\r\n      alert('Please enter a valid spent amount');\r\n      return;\r\n    }\r\n\r\n    // If expiry date is not provided, use the current date\r\n    let expiryDate = newItem.expiryDate;\r\n    if (!expiryDate) {\r\n      const currentDate = new Date();\r\n      expiryDate = currentDate.toLocaleDateString('en-GB');\r\n    }\r\n\r\n    // Format the spent amount with Australian dollar symbol\r\n    const formattedSpent = `${parseFloat(newItem.spent).toFixed(2)}`;\r\n\r\n\r\n\r\n    // Calculate the status based on the expiry date\r\n    const status = calculateStatus(expiryDate);\r\n\r\n    // Create a new item object\r\n    const newInventoryItem = {\r\n      id: inventory.length + 1,\r\n      name: newItem.name,\r\n      amount: parseFloat(newItem.amount),\r\n      spent: formattedSpent,\r\n      expiryDate: expiryDate,\r\n      status: status\r\n    };\r\n\r\n    // Add the new item to the inventory\r\n    const updatedInventory = [...inventory, newInventoryItem];\r\n    setInventory(updatedInventory);\r\n    localStorage.setItem('inventory', JSON.stringify(updatedInventory));\r\n\r\n    // Check expiry date and update status for the new item\r\n    // const updatedInventoryWithStatus = updatedInventory.map(item => {\r\n    //   if (item.id === newInventoryItem.id) {\r\n    //     const parts = item.expiryDate.split('/');\r\n    //     const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n    //     const expiryDate = new Date(formattedDate);\r\n    //     const currentDate = new Date();\r\n\r\n    //     if (expiryDate < currentDate) {\r\n    //       return { ...item, status: 'Expired' };\r\n    //     } else {\r\n    //       return { ...item, status: 'Not Expired' };\r\n    //     }\r\n    //   }\r\n    //   return item;\r\n    // });\r\n    // setInventory(updatedInventoryWithStatus);\r\n\r\n\r\n    // Reset the form fields and hide the add popup\r\n    setNewItem({\r\n      name: '',\r\n      amount: '',\r\n      spent: '',\r\n      expiryDate: '',\r\n      status: ''\r\n    });\r\n    setShowAddPopup(false);\r\n  };\r\n\r\n  const populateItems = (name, amount, spent, expiryDate, status) => {\r\n    const newInventoryItem = {\r\n      id: inventory.length + 1,\r\n      name: name,\r\n      amount: amount,\r\n      spent: spent,\r\n      expiryDate: expiryDate,\r\n      status: status\r\n    };\r\n    setInventory([...inventory, newInventoryItem]);\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await fetch('https://rohan2121.pythonanywhere.com/', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setName(data.name);\r\n      setImgSrc(data.imgSrc);\r\n      setExtractedText(data.extracted_text);\r\n      setMsg(data.msg);\r\n      setNewItem(prevItem => ({\r\n        ...prevItem,\r\n        name: data.name,\r\n        amount: data.extracted_text,\r\n        spent: data.msg,\r\n        expiryDate: '',\r\n        status: ''\r\n      }));\r\n      if (extractedText !== '' || msg !== '') {\r\n        populateItems(data.name, data.extracted_text, data.msg, '', '');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setMsg('Failed to upload image');\r\n    }\r\n  };\r\n\r\n  const handleFileChange1 = (e) => {\r\n    setFile1(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload2 = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file1', file1);\r\n    setShowScanReceiptPopup(false); // Close the popup\r\n    try {\r\n      const response = await fetch('https://new12222-18275757747f.herokuapp.com/pred', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setImgSrc1(data.imgSrc1);\r\n      setExtractedText1(data.extracted_text1);\r\n      setMsg1(data.msg1);\r\n      const daysToAdd = parseInt(data.msg1, 10);\r\n      const currentDate = new Date();\r\n      currentDate.setDate(currentDate.getDate() + daysToAdd);\r\n      const formattedDate = `${currentDate.getDate()}/${currentDate.getMonth() + 1}/${currentDate.getFullYear()}`;\r\n      if (extractedText1 !== '' || msg1 !== '') {\r\n        populateItems(data.extracted_text1, '', '', formattedDate, '');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setMsg1('Failed to upload image');\r\n    }\r\n  };\r\n\r\n  const handleFileChange2 = (e) => {\r\n    setFile2(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload3 = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file2', file2);\r\n\r\n    try {\r\n      const response = await fetch('https://rohan22.pythonanywhere.com/recpt', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setImgSrc2(data.imgSrc2);\r\n      setExtractedText2(data.extracted_text2);\r\n      setMsg2('Image uploaded successfully!');\r\n      setNewItem(prevItem => ({\r\n        ...prevItem,\r\n        name: '',\r\n        amount: '',\r\n        spent: '',\r\n        expiryDate: data.extracted_text2,\r\n        status: ''\r\n      }));\r\n      if (extractedText2 !== '' || msg2 !== '') {\r\n        populateItems('', '', '', data.extracted_text2, '');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setMsg('Failed to upload image');\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n\r\n    <div>\r\n      {isPopupActive && <div className=\"modal-overlay\" onClick={closeAllPopups}></div>}\r\n      <div className=\"main-content\"></div>\r\n      <div className=\"toolbar\">\r\n        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n          <img src=\"ProjectLogo.png\" alt=\"App Logo\" style={{ width: '40px', height: '40px', marginRight: '10px' }} />\r\n          <span style={{ color: 'green', fontWeight: 'bold' }}>EcoEats</span>\r\n        </div>\r\n        <div className=\"toolbardiv\">\r\n          <button onClick={() => console.log(\"Recipes clicked\")}>Recipes</button>\r\n          <button onClick={() => console.log(\"Information clicked\")}>Information</button>\r\n          <button onClick={() => console.log(\"Recycling Agencies Clicked\")}>Recycling Agencies</button>\r\n          <button onClick={() => console.log(\"Check My Knowledge Clicked\")}>Check My Knowledge</button>\r\n        </div>\r\n        <div></div>\r\n      </div>\r\n      <div className=\"App\">\r\n        <header></header>\r\n        <InventoryList\r\n          inventory={inventory}\r\n          onEdit={handleEditItem}\r\n          onDelete={handleDeleteItem}\r\n\r\n          togglePopup={togglePopup} // Add this line to pass the function as a prop\r\n        />\r\n        <div className=\"actions\">\r\n          <button className=\"add-button\" onClick={() => togglePopup('add')}>Add Manually</button>\r\n          <div className=\"scan-buttons\">\r\n            <button onClick={() => togglePopup('receipt')}>Scan Receipt</button>\r\n            {/* <button onClick={() => togglePopup('package')}>Scan Package</button>\r\n            <button onClick={() => togglePopup('produce')}>Scan Fresh Produce</button> */}\r\n          </div>\r\n\r\n\r\n\r\n          {showAddPopup && (\r\n            <div\r\n              className=\"modal-overlay\"\r\n              onClick={() => setShowAddPopup(false)}\r\n            ></div>\r\n          )}\r\n\r\n\r\n\r\n          {/* Add Popup */}\r\n          {showAddPopup && (\r\n\r\n            <div className=\"popup large-popup\">\r\n              <h2>Add New Item</h2>\r\n              <div className=\"form-group\">\r\n                <label>Name:</label>\r\n                <input type=\"text\" name=\"name\" value={newItem.name} onChange={handleInputChange} />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Quantity:</label>\r\n                <input type=\"text\" name=\"amount\" value={newItem.amount} onChange={handleInputChange} />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <div className=\"form-group\">\r\n                  <label>Price:</label>\r\n                  <input type=\"text\" name=\"spent\" value={newItem.spent} onChange={handleInputChange} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Expiry Date:</label>\r\n                <DatePicker\r\n                  selected={expiryPlaceholder}\r\n                  onChange={(date) => {\r\n                    // Format the selected date\r\n                    const formattedDate = date.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });\r\n                    // Set the formatted date to the expiryPlaceholder\r\n                    setExpiryPlaceholder(date);\r\n                    // Update the expiry date in newItem\r\n                    setNewItem(prevItem => ({ ...prevItem, expiryDate: formattedDate }));\r\n                  }}\r\n                  dateFormat=\"dd MMM yyyy\"\r\n\r\n                  // Add a specific class name for date picker in adding item mode\r\n                  className=\"date-picker add-date-picker\"\r\n                />\r\n              </div>\r\n\r\n              {/* scan  bottons to get expiry date directly\r\n              <div className=\"scan-buttons\">\r\n                <button onClick={() => togglePopup('package')}>Scan Package</button>\r\n                <button onClick={() => togglePopup('produce')}>Scan Fresh Produce</button>\r\n              </div>\r\n              */}\r\n\r\n\r\n              <div className=\"form-actions\">\r\n                <button onClick={handleAddItem}>Save</button>\r\n                <button onClick={() => togglePopup('add')}>Cancel</button>\r\n              </div>\r\n            </div>\r\n\r\n          )}\r\n\r\n          {/* Scan Receipt Popup */}\r\n          {showScanReceiptPopup && (\r\n\r\n            <div className=\"popup\">\r\n              <h2>Scan Receipt</h2>\r\n              <div className=\"scan-options\">\r\n                <form onSubmit={handleUpload} encType=\"multipart/form-data\">\r\n                  <input type=\"file\" name=\"file\" onChange={handleFileChange} />\r\n                  <input type=\"submit\" value=\"Upload\" />\r\n                </form>\r\n                {imgSrc && <img src={imgSrc} alt=\"Uploaded\" />}\r\n              </div>\r\n              <button onClick={() => togglePopup('receipt')}>Cancel</button>\r\n            </div>\r\n\r\n          )}\r\n\r\n          {/* Scan Package Popup */}\r\n          {showScanPackagePopup && (\r\n\r\n            <div className=\"popup\">\r\n              <h2>Scan Package</h2>\r\n              <div className=\"scan-options\">\r\n                <form onSubmit={handleUpload3} encType=\"multipart/form-data\">\r\n                  <input type=\"file\" name=\"file2\" onChange={handleFileChange2} />\r\n                  <input type=\"submit\" value=\"Upload\" />\r\n                </form>\r\n                {imgSrc2 && <img src={imgSrc2} alt=\"Uploaded\" />}\r\n              </div>\r\n              <button onClick={() => togglePopup('package')}>Cancel</button>\r\n            </div>\r\n\r\n          )}\r\n\r\n          {/* Scan Fresh Produce Popup */}\r\n          {showScanProducePopup && (\r\n\r\n            <div className=\"popup\">\r\n              <h2>Scan Produce</h2>\r\n\r\n              <div className=\"scan-options\">\r\n                <form id=\"uploadForm\" onSubmit={handleUpload2} encType=\"multipart/form-data\">\r\n                  <input type=\"file\" name=\"file1\" onChange={handleFileChange1} />\r\n                  <input type=\"submit\" value=\"Upload\" />\r\n                </form>\r\n                {imgSrc1 && <img src={imgSrc1} alt=\"Uploaded\" />}\r\n                {/* populateItems(extractedText1, '', '', msg1, ''); */}\r\n              </div>\r\n              {/* <button onClick={() => {\r\n              document.getElementById(\"uploadForm\").submit();\r\n              populateItems(extractedText1, '', '', msg1, '');\r\n              }}>Upload</button> */}\r\n              <button onClick={() => togglePopup('produce')}>Cancel</button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Show Status Indicator Popup */}\r\n          {showStatusModal && (\r\n            <div className=\"popup status-popup\">\r\n              <div className=\"content\">\r\n                <img src={statusIndicator} alt=\"Status Indicator\"  />\r\n              </div>\r\n              <button className=\"center-button\" onClick={() => togglePopup('statusInfo')}>Close</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Maininventory;\r\n",[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\recipes.js",["124","125"],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\recycling.js",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\information.js",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\knowledge.js",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\navigation.jsx",["126"],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\contact.jsx",["127","128","129"],[],"import { useState } from \"react\";\r\nimport emailjs from \"emailjs-com\";\r\nimport React from \"react\";\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\nexport const Contact = (props) => {\r\n  const [{ name, email, message }, setState] = useState(initialState);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n  const clearState = () => setState({ ...initialState });\r\n  \r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(name, email, message);\r\n    \r\n    {/* replace below with your own Service ID, Template ID and Public Key from your EmailJS account */ }\r\n    \r\n    emailjs\r\n      .sendForm(\"YOUR_SERVICE_ID\", \"YOUR_TEMPLATE_ID\", e.target, \"YOUR_PUBLIC_KEY\")\r\n      .then(\r\n        (result) => {\r\n          console.log(result.text);\r\n          clearState();\r\n        },\r\n        (error) => {\r\n          console.log(error.text);\r\n        }\r\n      );\r\n  };\r\n  return (\r\n    <div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\features.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\header.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\gallery.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\about.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\testimonials.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\services.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\Team.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\components\\InventoryList.js",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\components\\image.jsx",[],[],"C:\\Users\\nams1\\OneDrive\\Documents\\Academic\\SEM-4\\EcoEats_newgithub\\frontend\\src\\Pages\\Page\\au-map.jsx",[],[],{"ruleId":"130","severity":1,"message":"131","line":3,"column":10,"nodeType":"132","messageId":"133","endLine":3,"endColumn":20},{"ruleId":"130","severity":1,"message":"134","line":5,"column":10,"nodeType":"132","messageId":"133","endLine":5,"endColumn":18},{"ruleId":"130","severity":1,"message":"135","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":15},{"ruleId":"130","severity":1,"message":"136","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":18},{"ruleId":"130","severity":1,"message":"137","line":8,"column":10,"nodeType":"132","messageId":"133","endLine":8,"endColumn":17},{"ruleId":"130","severity":1,"message":"138","line":9,"column":10,"nodeType":"132","messageId":"133","endLine":9,"endColumn":22},{"ruleId":"130","severity":1,"message":"139","line":10,"column":10,"nodeType":"132","messageId":"133","endLine":10,"endColumn":14},{"ruleId":"130","severity":1,"message":"140","line":11,"column":10,"nodeType":"132","messageId":"133","endLine":11,"endColumn":17},{"ruleId":"130","severity":1,"message":"141","line":13,"column":8,"nodeType":"132","messageId":"133","endLine":13,"endColumn":20},{"ruleId":"130","severity":1,"message":"142","line":1,"column":38,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"130","severity":1,"message":"143","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":18},{"ruleId":"130","severity":1,"message":"144","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":25},{"ruleId":"130","severity":1,"message":"145","line":73,"column":10,"nodeType":"132","messageId":"133","endLine":73,"endColumn":14},{"ruleId":"130","severity":1,"message":"146","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":21},{"ruleId":"130","severity":1,"message":"147","line":286,"column":7,"nodeType":"132","messageId":"133","endLine":286,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":23,"column":13,"nodeType":"150","endLine":23,"endColumn":93},{"ruleId":"130","severity":1,"message":"151","line":13,"column":9,"nodeType":"132","messageId":"133","endLine":13,"endColumn":21},{"ruleId":"130","severity":1,"message":"152","line":20,"column":9,"nodeType":"132","messageId":"133","endLine":20,"endColumn":21},{"ruleId":"153","severity":1,"message":"154","line":24,"column":5,"nodeType":"155","messageId":"156","endLine":24,"endColumn":106},"no-unused-vars","'Navigation' is defined but never used.","Identifier","unusedVar","'Features' is defined but never used.","'About' is defined but never used.","'Services' is defined but never used.","'Gallery' is defined but never used.","'Testimonials' is defined but never used.","'Team' is defined but never used.","'Contact' is defined but never used.","'SmoothScroll' is defined but never used.","'useRef' is defined but never used.","'faCoffee' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'name' is assigned a value but never used.","'InventoryList' is defined but never used.","'handleFilterChange' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'handleChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]
>>>>>>> e2e7a37312ebcfc33f9765ffdd83ff2e1884aebe
